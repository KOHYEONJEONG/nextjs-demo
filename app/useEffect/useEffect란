 #참고 
 https://react.vlpt.us/basic/16-useEffect.html
 
 # 선언
import React, { useEffect } from 'react';

# useEffect를 사용하여 마운트/언마운트/업데이트시 할 작업 설정
이번에는 useEffect 라는 Hook 을 사용하여
 1. 해당 컴포넌트가 마운트 됐을 때 (처음 나타났을 때), 
 2. 해당 컴포넌트가 언마운트 됐을 때 (사라질 때), 
 3. 그리고 파라미터(props)가 업데이트 될 때 (특정 props가 바뀔 때)
 특정 작업을 처리하는 방법에 대해서 알아보겠습니다.


 # 사용 설명
 useEffect 를 사용 할 때에는 첫번째 파라미터에는 함수,
`두번째 파라미터에는 의존값이 들어있는 배열 (deps)을 넣습니다.
💢만약에 deps 배열을 비우게 된다면 ([])
✅컴포넌트가 처음 나타날때에만 useEffect 에 등록한 함수가 호출됩니다.

# cleanup이란? (함수 반환)
그리고, useEffect 에서는 
✅함수를 반환 할 수 있는데 
이를 cleanup 함수라고 부릅니다.

 cleanup 함수는 useEffect 에 대한 뒷정리를 해준다고 
 이해하시면 되는데요, 

 deps 가 비어있는 경우에는 컴포넌트가 사라질 때 
 cleanup 함수가 호출됩니다.

# 사용
function User({ user, onRemove ,onToggle}) {

  useEffect(()=>{
    console.log('user 값이 설정됨.')

    //✅return은 없어도 됨(cleanup 때문에)    
    return () => {
      console.log('user가 바뀌기 전...');
      
    }
  }, []);//✅빈 deps

...
}

# deps에 특정 값 넣기
deps 에 특정 값을 넣게 된다면,  
컴포넌트(User 컴포넌트)가 처음 마운트 될 때에도 호출이 되고,
지정한 값이 바뀔 때에도 호출이 됩니다. 

그리고, deps안에 특정 값이 있다면 언마운트(사라질 때)시에도 호출이되고, 
값이 바뀌기 직전에도 호출이 됩니다.

function User({ user, onRemove, onToggle }) {
  useEffect(() => {
    console.log('user 값이 설정됨');
    console.log(user);

    return () => {
      console.log('user 가 바뀌기 전..');
      console.log(user);
    };

  }, [user]); //✅ 특정 값 deps

  ...
}

# (중요)규칙
useEffect 안에서 사용하는 상태나, props 가 있다면, 
✅useEffect 의 deps 에 넣어주어야 합니다. 
그렇게 하는게, 규칙입니다.

만약 useEffect 안에서 사용하는 상태나 props 를 deps 에 넣지 않게 된다면 useEffect 에 등록한 함수가 실행 될 때 
💢최신 props / 상태를 가르키지 않게 됩니다.